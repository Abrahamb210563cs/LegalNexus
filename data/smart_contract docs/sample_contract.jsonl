{"instruction": "audit", "input": "pragma solidity ^0.8.0; contract Test { mapping(address => uint) public balances; function withdraw(uint amount) public { require(balances[msg.sender] >= amount); payable(msg.sender).transfer(amount); balances[msg.sender] -= amount; } }", "output": "Potential reentrancy vulnerability. State update occurs after transfer. Use Checks-Effects-Interactions pattern."}

{"instruction": "audit", "input": "pragma solidity ^0.4.17; contract TimeLock { uint unlockTime; function TimeLock(uint _unlockTime) public { unlockTime = _unlockTime; } function claim() public { require(now >= unlockTime); msg.sender.transfer(this.balance); } }", "output": "Timestamp dependency detected. Using 'now' may be manipulated by miners slightly. Consider a reliable oracle."}
